plugins {
    id 'io.qameta.allure' version '2.9.6'
    id 'java'
}

def allureVersion = '2.16.1'


allure {
    version = allureVersion

    useJUnit5 {
        version = allureVersion
    }
}


group 'com.petclinic'
version '1.0-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
}

dependencies {
    implementation 'io.rest-assured:rest-assured:4.4.0'
    implementation 'org.aeonbits.owner:owner:1.0.12'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.0'
    implementation 'com.github.javafaker:javafaker:1.0.2'
    implementation 'com.natpryce:make-it-easy:4.0.1'
    implementation "io.qameta.allure:allure-rest-assured:$allureVersion"

    testImplementation(platform('org.junit:junit-bom:5.8.1'))
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    testImplementation "io.qameta.allure:allure-junit5:$allureVersion"
}

test {
    systemProperties System.properties

    def DEFAULT_ENVIRONMENT = 'env1'
    def DEFAULT_CATEGORY = 'smoke'

    def ENVIRONMENT_PROPERTY_NAME = 'env'
    def CATEGORY_PROPERTY_NAME = 'testsCategory'

    def chosenEnvironment = System.getProperty(ENVIRONMENT_PROPERTY_NAME) ?: DEFAULT_ENVIRONMENT
    systemProperty ENVIRONMENT_PROPERTY_NAME, chosenEnvironment

    def chosenTestCategory = System.getProperty(CATEGORY_PROPERTY_NAME) ?: DEFAULT_CATEGORY
    systemProperty CATEGORY_PROPERTY_NAME, chosenTestCategory

    println "Chosen test env: '$chosenEnvironment' and tests category: '$chosenTestCategory'"

    useJUnitPlatform {
        includeTags chosenTestCategory
    }

    testLogging {
        events "passed", "skipped", "failed"
    }
}
